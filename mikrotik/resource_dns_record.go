// Code generated by a script. DO NOT EDIT.
package mikrotik

import (
	"context"
	"github.com/ddelnano/terraform-provider-mikrotik/client"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceDnsRecord() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceDnsRecordCreate,
		ReadContext:   resourceDnsRecordRead,
		UpdateContext: resourceDnsRecordUpdate,
		DeleteContext: resourceDnsRecordDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type: schema.TypeString,

				Required: true,
				Optional: false,
				Computed: false,
			},
			"ttl": {
				Type: schema.TypeInt,

				Required: false,
				Optional: true,
				Computed: true,
			},
			"address": {
				Type: schema.TypeString,

				Required: true,
				Optional: false,
				Computed: false,
			},
		},
	}
}

func resourceDnsRecordCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	record := dataToDnsRecord(d)

	c := m.(*client.Mikrotik)

	mikrotikRecord, err := c.AddDnsRecord(record)
	if err != nil {
		return diag.FromErr(err)
	}

	return dnsRecordToData(mikrotikRecord, d)
}

func resourceDnsRecordRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(*client.Mikrotik)

	record, err := c.FindDnsRecord(d.Id())

	if _, ok := err.(*client.NotFound); ok {
		d.SetId("")
		return nil
	}

	return dnsRecordToData(record, d)
}

func resourceDnsRecordUpdate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(*client.Mikrotik)

	currentRecord, err := c.FindDnsRecord(d.Id())
	record := dataToDnsRecord(d)
	record.Id = currentRecord.Id

	if err != nil {
		return diag.FromErr(err)
	}

	updatedRecord, err := c.UpdateDnsRecord(record)
	if err != nil {
		return diag.FromErr(err)
	}

	return dnsRecordToData(updatedRecord, d)
}

func resourceDnsRecordDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(*client.Mikrotik)
	id := d.Id()

	if record, err := c.FindDnsRecord(id); err != nil {
		return diag.FromErr(err)
	} else {
		id = record.Id
	}
	err := c.DeleteDnsRecord(id)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func dataToDnsRecord(d *schema.ResourceData) *client.DnsRecord {
	record := new(client.DnsRecord)

	record.Name = d.Get("name").(string)
	record.Ttl = d.Get("ttl").(int)
	record.Address = d.Get("address").(string)

	return record
}

func dnsRecordToData(record *client.DnsRecord, d *schema.ResourceData) diag.Diagnostics {
	values := map[string]interface{}{
		"name":    record.Name,
		"ttl":     record.Ttl,
		"address": record.Address,
	}

	d.SetId(record.Name)

	var diags diag.Diagnostics

	for key, value := range values {
		if err := d.Set(key, value); err != nil {
			diags = append(diags, diag.Errorf("failed to set %s: %v", key, err)...)
		}
	}

	return diags
}
