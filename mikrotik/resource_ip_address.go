// Code generated by a script. DO NOT EDIT.
package mikrotik

import (
	"context"
	"github.com/ddelnano/terraform-provider-mikrotik/client"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceIpAddress() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceIpAddressCreate,
		ReadContext:   resourceIpAddressRead,
		UpdateContext: resourceIpAddressUpdate,
		DeleteContext: resourceIpAddressDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			"address": {
				Type: schema.TypeString,

				Required: true,
				Optional: false,
				Computed: false,
			},
			"comment": {
				Type: schema.TypeString,

				Required: false,
				Optional: true,
				Computed: false,
			},
			"disabled": {
				Type: schema.TypeBool,

				Required: false,
				Optional: true,
				Computed: false,
			},
			"interface": {
				Type: schema.TypeString,

				Required: true,
				Optional: false,
				Computed: false,
			},
			"network": {
				Type: schema.TypeString,

				Required: false,
				Optional: false,
				Computed: true,
			},
		},
	}
}

func resourceIpAddressCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	record := dataToIpAddress(d)

	c := m.(*client.Mikrotik)

	mikrotikRecord, err := c.AddIpAddress(record)
	if err != nil {
		return diag.FromErr(err)
	}

	return ipAddressToData(mikrotikRecord, d)
}

func resourceIpAddressRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(*client.Mikrotik)

	record, err := c.FindIpAddress(d.Id())

	if _, ok := err.(*client.NotFound); ok {
		d.SetId("")
		return nil
	}

	return ipAddressToData(record, d)
}

func resourceIpAddressUpdate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(*client.Mikrotik)

	currentRecord, err := c.FindIpAddress(d.Id())
	record := dataToIpAddress(d)
	record.Id = currentRecord.Id

	if err != nil {
		return diag.FromErr(err)
	}

	updatedRecord, err := c.UpdateIpAddress(record)
	if err != nil {
		return diag.FromErr(err)
	}

	return ipAddressToData(updatedRecord, d)
}

func resourceIpAddressDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	c := m.(*client.Mikrotik)
	id := d.Id()

	err := c.DeleteIpAddress(id)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func dataToIpAddress(d *schema.ResourceData) *client.IpAddress {
	record := new(client.IpAddress)

	record.Address = d.Get("address").(string)
	record.Comment = d.Get("comment").(string)
	record.Disabled = d.Get("disabled").(bool)
	record.Interface = d.Get("interface").(string)
	record.Network = d.Get("network").(string)

	return record
}

func ipAddressToData(record *client.IpAddress, d *schema.ResourceData) diag.Diagnostics {
	values := map[string]interface{}{
		"address":   record.Address,
		"comment":   record.Comment,
		"disabled":  record.Disabled,
		"interface": record.Interface,
		"network":   record.Network,
	}

	d.SetId(record.Id)

	var diags diag.Diagnostics

	for key, value := range values {
		if err := d.Set(key, value); err != nil {
			diags = append(diags, diag.Errorf("failed to set %s: %v", key, err)...)
		}
	}

	return diags
}
